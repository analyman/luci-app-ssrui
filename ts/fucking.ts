/// <reference path="../www/luci-static/resources/ssrui/fucking.js"/>

import {SSRServer, SSRSubscription, default_local_address, default_local_port} from './subscribe';
import {_EventTarget, UActiveChange, UContentChange, UServerListChange} from './event';
import * as utils from './utils';
import * as fucking from '../www/luci-static/resources/ssrui/fucking';
import * as CONS from './constants';
import * as input from './input';
import * as controller from './controller';
import * as cssinjector from './css_injector';
import * as gfw from './gfw_operation';

// export constants to global scope
window["CONS"] = {};
for(let i in CONS)
    window["CONS"][i] = CONS[i];

// these infomation of image should be generated by lua in html, in other words should be 
// accessable in global scope
let img_dir = (window as any).img_dir;
let imgs    = (window as any).roll_imgs;
if (imgs == null || imgs.length == 0) {
    img_dir = "/luci-static/resources/ssrui/img/";
    imgs    = ["cat.jpg"];
}

// used for adding new subscription and when change of servers occurs
function subscribe_list_content(list: any[]) //{
{
    let out: any[] = [];
    list.map(x => out.push([x.group, x.server_list[0].group]));
    update_list_group(fucking.ElementsAccessor.subscriptions_group, out.map(x => x[1]), ["list-group-item"], "subscription", true, CONS.NewButtonName);
    for(let i = 0; i<fucking.ElementsAccessor.subscriptions_group.children.length - 1; i++)
        (fucking.ElementsAccessor.subscriptions_group.children[i] as any).ex_info = out[i][0] || "unknow address";
    (fucking.ElementsAccessor.subscriptions_group.lastChild as any).ex_info = CONS.AddNewSubs;
    fucking.ElementsAccessor.links_group.dispatchEvent(new CustomEvent(UContentChange));
} //}
// add new subscription
function add_new_subscription(url) //{
{
    let list: any[] = fucking.classify_servers_by_subscription(fucking.VarAccessor.server_index);
    list.push({group: url, server_list: [{group: "NEW DEFINED SUBSCRIPTION"}]});
    subscribe_list_content(list);
} //}

document.addEventListener("DOMContentLoaded", function() {
    fucking.retry_get_elements();
    console.log(gfw.fhash("hello"));

    fucking.ElementsAccessor.subscriptions_group.addEventListener(UContentChange, function() {
        let list: any[] = fucking.classify_servers_by_subscription(fucking.VarAccessor.server_index);
        subscribe_list_content(list);
    });

    document.addEventListener(UServerListChange, function() {
        let list: any[] = fucking.classify_servers_by_subscription(fucking.VarAccessor.server_index);
        subscribe_list_content(list);
        fucking.ElementsAccessor.subscriptions_group.dispatchEvent(new CustomEvent(UContentChange));
    });

    // mouse hover behavior
    fucking.ElementsAccessor.subscriptions_group.addEventListener("mouseover", function(earg: MouseEvent) {
        earg.stopPropagation();
        let origin_li: HTMLElement = earg.target as HTMLElement;
        if(origin_li.nodeName.toLowerCase() != "li") origin_li = (origin_li as HTMLElement).parentNode as HTMLElement;
        if(origin_li.nodeName.toLowerCase() != "li") return;
        let width:  number = origin_li.offsetWidth * 0.7;
        let height: number = origin_li.offsetHeight;
        let insert_tip: HTMLElement = utils.createNodeFromHtmlString(`<div class='rounded bg-white border border-warning m-2 p-2 position-absolute' style="z-index: 3; width: ${width}px;">` 
            + (origin_li as any).ex_info + "</div>");
        height += (insert_tip as HTMLElement).offsetHeight;
        insert_tip.style.bottom = (height * 1.05).toString();
        origin_li.appendChild(insert_tip);
        return;
    });
    fucking.ElementsAccessor.subscriptions_group.addEventListener("mouseout", function(earg: MouseEvent) {
        earg.stopPropagation();
        let origin_li: Element = earg.target as Element;
        if(origin_li.nodeName.toLowerCase() != "li") origin_li = (origin_li as Element).parentNode as Element;
        if(origin_li.nodeName.toLowerCase() != "li") return;
        origin_li.removeChild(origin_li.lastChild);
        return;
    });

    fucking.ElementsAccessor.links_group.addEventListener(UContentChange, function() {
        let [active_elem, c_len, i]: [HTMLElement, number, number] = list_get_active_elem(fucking.ElementsAccessor.subscriptions_group);
        if (i == c_len - 1) {
            while(fucking.ElementsAccessor.links_group.firstChild)
                fucking.ElementsAccessor.links_group.removeChild(fucking.ElementsAccessor.links_group.firstChild);
            let BG_IMG: HTMLElement = utils.createNodeFromHtmlString(`<li class="list-group-item hello"><div class="rounded"><img class="mw-100 mh-100 h-auto"></div></li>`);
            fucking.ElementsAccessor.links_group.appendChild(BG_IMG);
            img_roll_inject_css(BG_IMG.firstChild as HTMLElement, img_dir, imgs, 0, 3 * 1000);
            return;
        }
        let link: string = (active_elem as any).ex_info;
        let list: any[] = fucking.classify_servers_by_subscription(fucking.VarAccessor.server_index);
        let server_list: any[] = null;
        for(let j = 0; j<list.length; j++) {
            if(link == list[j].group){
                server_list = list[j].server_list;
                break;
            }
        }
        if(server_list == null) {
            while(fucking.ElementsAccessor.links_group.firstChild)
                fucking.ElementsAccessor.links_group.removeChild(fucking.ElementsAccessor.links_group.firstChild);
            return;
        }
        let out: any[] = [];
        server_list.map(x => out.push(x.remarks || "UNKONW"));
        update_list_group(fucking.ElementsAccessor.links_group, out, ["list-group-item"], "link", false);
        // little info table about this server;
        let info: any[] = [];
        server_list.map( x => {
            let table_template = `
            <div><table class="table table-light rounded mt-2 border">
                <tr><td>${CONS.Server} :</td>           <td>${x.server}       </td></tr>
                <tr><td>${CONS.Server_Port}:</td>       <td>${x.server_port}  </td></tr>
                <tr><td>${CONS.Local_Address}:</td>     <td>${x.local_address}</td></tr>
                <tr><td>${CONS.Local_Port}:</td>        <td>${x.local_port}   </td></tr>
                <tr><td>${CONS.Password}:</td>          <td>${x.password}     </td></tr>
                <tr><td>${CONS.Method}:</td>            <td>${x.method}       </td></tr>
                <tr><td>${CONS.Protocol}:</td>          <td>${x.protocol}     </td></tr>
                <tr><td>${CONS.Protocol_Parameter}:</td><td>${x.protoparam}   </td></tr>
                <tr><td>${CONS.Obfs}:</td>              <td>${x.obfs}         </td></tr>
                <tr><td>${CONS.Obfs_Parameter}:</td>    <td>${x.obfsparam}    </td></tr>
            </table></div>`
            info.push(utils.createNodeFromHtmlString(table_template));
        });
        for(let i = 0; i<fucking.ElementsAccessor.links_group.children.length; i++)
            fucking.ElementsAccessor.links_group.children[i].appendChild(info[i]);
    });

    // LIST CLICK Events
    fucking.ElementsAccessor.links_group.addEventListener("click", (ev: MouseEvent) => {
        list_click_change_active(ev);
    });
    fucking.ElementsAccessor.subscriptions_group.addEventListener("click", (ev: MouseEvent) => {
        if((ev.target as HTMLElement).innerText == CONS.NewButtonName)
            address_bar.show();
        let result = list_click_change_active(ev);
        if (result) 
            fucking.ElementsAccessor.links_group.dispatchEvent(new CustomEvent(UContentChange));
    });
});

// (ul | or) > li > a.active
export function list_click_change_active(eargs: Event): boolean //{
{
    let origin_target: Element  = eargs.target as Element;
    let current_target: Element = eargs.currentTarget as Element;
    if (!current_target.nodeName.toLowerCase().match(/(ul)|(ol)/)) return false;
    if (origin_target.nodeName.toLowerCase() != "a") return false;
    if (origin_target.parentNode.nodeName.toLowerCase() != "li") return false;
    if (origin_target.parentNode.parentNode != current_target) return false;
    eargs.stopPropagation();
    if (origin_target.classList.contains("active")) return false;
    for(let i = 0; i<current_target.children.length; ++i) {
        current_target.children[i].children[0].classList.remove("active");
    }
    origin_target.classList.add("active");
    return true;
} //}
export function list_get_active_elem(list: HTMLElement): [HTMLElement, number, number] //{
{
    let i: number;
    let c_len = list.children.length;
    for(i = 0; i<c_len; i++)
        if((list.children[i].firstChild as HTMLElement).classList.contains("active"))
            break;
    let active_elem: HTMLElement = list.children[i] as HTMLElement;
    return [active_elem, c_len, i];
} //}

export function get_active_elem(ulol: HTMLElement): HTMLElement //{
{
    if (!ulol.nodeName.toLowerCase().match(/(ul)|(ol)/)) return null;
    for(let i = 0; i<ulol.children.length; i++) {
        let tt: HTMLElement = ulol.children[i].firstChild as HTMLElement;
        if(tt.classList.contains("active"))
            return tt;
    }
    return null;
} //}

export function update_list_group(
    list: Element, msgs: string[], extra_classes: string[], href_and_id_prefix: string,
    new_button: boolean = false, new_button_str: string = "NEW"): void //{
{
    if (!list.nodeName.toLowerCase().match(/(ol)|(ul)/)) return;
    let k: number = 0;
    for(let j = 0; j<list.children.length; ++j) {
        if (list.children[j].nodeName.toLowerCase() != "li")
            continue;
        if (list.children[j].children[0].classList.contains("active"))
            break;
        ++k;
    }
    while(list.lastChild)
        list.removeChild(list.lastChild);
    if (msgs.length == 0 && !new_button) return;
    let new_node_li = document.createElement("li");
    let new_node    = document.createElement("a");
    new_node_li.appendChild(new_node);
    for(let i = 0; i<msgs.length; ++i) {
        let nn: Element = new_node_li.cloneNode(true) as Element;
        nn.children[0].setAttribute("href", "#" + href_and_id_prefix + (i + 1));
        nn.children[0].setAttribute("id",   href_and_id_prefix + "-" + (i + 1));
        nn.children[0].innerHTML = msgs[i];
        extra_classes.map(cls => nn.children[0].classList.add(cls));
        list.appendChild(nn);
    }
    if (new_button) {
        new_node.setAttribute("href", "#" + href_and_id_prefix + "0");
        new_node.setAttribute("id",   href_and_id_prefix + "-" + "0");
        new_node.innerHTML = new_button_str;
        extra_classes.map(cls => new_node.classList.add(cls));
        list.appendChild(new_node_li);
    }
    if (list.children.length <= k)
        (list.lastChild.firstChild as Element).classList.add("active");
    else
        list.children[k].children[0].classList.add("active");
    return;
} //}

export function img_roll(img_elem: HTMLElement, dir: string, imgs: string[], where: number, interval: number): void //{
{
    if(utils.isHidden(img_elem)) return;
    if(where >= imgs.length || img_elem.nodeName.toLowerCase() != "img") {
        console.error("debug here");
        return;
    }
    img_elem.setAttribute("src", dir + imgs[where]);
    let next: number = where + 1;
    if(where == imgs.length - 1) next = 0;
    window.setTimeout(img_roll, interval, img_elem, dir, imgs, next, interval);
} //}

// div>img
export function img_roll_inject_css(div__: HTMLElement, dir: string, imgs: string[], where: number, interval: number): void //{
{
    if(utils.isHidden(div__)) return;
    if(where >= imgs.length       || div__.nodeName.toLowerCase() != "div" ||
       div__.children.length > 2  || div__.firstChild.nodeName.toLowerCase() != "img" ||
      (div__.children.length == 2 && div__. lastChild.nodeName.toLowerCase() != "style")) {
        console.error("debug here");
        return;
    }
    let __img: HTMLElement = div__.firstChild as HTMLElement;
    let is_first: boolean = false;
    if(div__.children.length == 2)
        div__.removeChild(div__.lastChild);
    else
        is_first = true;
    let id = utils.makeid(16);
    if(!dir.endsWith("/")) dir = dir + "/";
    let css_template: string; 
    let current_img:  string = dir + imgs[where];
    let origin_img:   string;
    let dtime: number = interval * 0.2;
    if(where == 0) {
        origin_img = dir + imgs[imgs.length - 1];
    } else {
        origin_img = dir + imgs[where - 1];
    }
    if (is_first) {
        css_template = 
        `<style>
        #${id} {
            background-image: url(${current_img});
        }
        </style>`;
    } else  {
        css_template = 
        `<style>
        #${id} {
            background-image: url(${current_img});
            animation-name:   anim-${id};
            animation-duration: ${dtime / 1000.0}s;
            background-size: cover;
            background-repeat: no-repeat;
        }
        @keyframes anim-${id} {
            0%   {background-image: url(${origin_img}); } 
            100% {background-image: url(${current_img});}
        }
        </style>`;
    }
    let cssnode = utils.createNodeFromHtmlString(css_template);
    div__.appendChild(cssnode);
    __img.setAttribute("src", current_img);
    __img.style.visibility = "hidden";
    div__.setAttribute("id", id);
    let next: number = where + 1;
    if(where == imgs.length - 1) next = 0;
    window.setTimeout(img_roll_inject_css, interval, div__, dir, imgs, next, interval);
} //}
// img
export function img_roll_inject_css_helper_img(img_elem: HTMLElement, dir: string, imgs: string[], where: number, interval: number): void //{
{
    img_roll_inject_css(img_elem.parentNode as HTMLElement, dir, imgs, where, interval);
} //}

// initial state should be hidden with 'd-none' bootstrap class
class MessageBar extends _EventTarget //{
{
    where: HTMLElement = null;
    displayState: boolean   = false;
    displayClass: string;
    msgQueue: any[][];
    amountOfTimeOfInvoking: number;
    constructor(target: HTMLElement, displayClass: string = "d-block") {
        super();
        if(target == null) {
            console.error("null target");
            return;
        }
        this.where                  = target;
        this.displayClass           = displayClass;
        this.msgQueue               = [];
        this.amountOfTimeOfInvoking = 0;
    }
    _show(time: number = 3000): void {
        if(this.displayState) return;

        let id = utils.makeid(16);
        let css_template: string = 
        `<style>
        #${id} {
            animation-name:   anim-${id};
            animation-duration: ${time * 0.2 / 1000.0}s;
            background-size: cover;
            background-repeat: no-repeat;
        }
        @keyframes anim-${id} {
            0%    {opacity: 0;} 
            100%  {opcaity: 1;}
        }
        </style>`;
        let newCss: Element = utils.createNodeFromHtmlString(css_template);
        let prevSibling: Element = this.where.previousSibling as Element;
        if(prevSibling == null || prevSibling.nodeName.toLowerCase() != "style") {
            this.where.parentNode.insertBefore(newCss, this.where);
        } else {
            this.where.parentNode.replaceChild(newCss, prevSibling);
        }

        this.where.setAttribute("id", id);
        this.where.classList.remove("d-none"); 
        this.where.classList.add(this.displayClass);
        this.displayState = true;
    }
    _hide(): void {
        if(!this.displayState) return;

        let time: number = 800;
        let id = utils.makeid(16);
        let css_template: string = 
        `<style>
        #${id} {
            animation-name:   anim-${id};
            animation-duration: ${time / 1000.0}s;
        }
        @keyframes anim-${id} {
            0%    {opacity: 1;} 
            100%  {opacity: 0; display: none;}
        }
        </style>`;
        let newCss: Element = utils.createNodeFromHtmlString(css_template);
        let prevSibling: Element = this.where.previousSibling as Element;
        if(prevSibling == null || prevSibling.nodeName.toLowerCase() != "style") {
            this.where.parentNode.insertBefore(newCss, this.where);
        } else {
            this.where.parentNode.replaceChild(newCss, prevSibling);
        }

        this.where.setAttribute("id", id);
        window.setTimeout((() => {
            this.where.classList.remove(this.displayClass);
            this.where.classList.add("d-none"); 
            this.displayState = false;
        }).bind(this), time);
    }
    __run(): void {
        if(this.displayState == true) return;
        if(this.msgQueue.length == 0) return;
        let keep = this.amountOfTimeOfInvoking;
        this.amountOfTimeOfInvoking++;
        let i: any[] = this.msgQueue.splice(0, 1)[0];
        if(i.length == 2) {
            this.where.innerHTML = i[0];
            this._show(i[1]);
            window.setTimeout(function(obj: MessageBar) {
                if(obj.amountOfTimeOfInvoking != ++keep) // this message had been cancelled
                    return;
                obj._hide();
                obj.__run();
            }, i[1], this);
        } else if (i.length == 3) {
            this.where.innerHTML = i[0];
            this._show();
            let etarget: _EventTarget = i[1];
            let event: string = i[2];
            etarget.addEventListener(event, (earg) => {
                if(this.amountOfTimeOfInvoking != ++keep) // this message had been cancelled
                    return;
                this._hide();
                this.__run();
            }, {once: true});
        } else {
            console.error("unexpected length.");
            return;
        }
    }
    ShowWithDuration(html_msg: string, duration: number, force: boolean = false): void {
        this.msgQueue.push([html_msg, duration]);
        if(force) {
            this.displayState = false;
        }
        this.__run();
    }
    ShowWithEvent(html_msg: string, target: _EventTarget, eventType: string, force: boolean = false): void {
        this.msgQueue.push([html_msg, target, eventType]);
        if(force) {
            this.displayState = false;
        }
        this.__run();
    }
} //}

class AddressBar //{
{
    where: HTMLTextAreaElement = null;
    displayState: boolean   = false;
    displayClass: string;
    constructor(target: HTMLTextAreaElement, displayClass: string = "d-block") {
        if(target == null) {
            console.error("null target");
            return;
        }
        this.where                  = target;
        this.displayClass           = displayClass;
    }
    check_input(interval: number, first: boolean = true): void {
        if(!first) {
            if(this.displayState == false)
                return;
            if(this.where.value == "") {
                this.hide();
                return;
            }
        }
        window.setTimeout(this.check_input.bind(this), interval, interval, false);
    }
    show(): void {
        if(this.displayState) return;

        let id = utils.makeid(16);
        let css_template: string = 
        `<style>
        #${id} {
            animation-name:   anim-${id};
            animation-duration: ${1200 / 1000.0}s;
            background-size: cover;
            background-repeat: no-repeat;
        }
        @keyframes anim-${id} {
            0%    {width: 10%; } 
            10%   {width: 15%; } 
            20%   {width: 25%; } 
            30%   {width: 45%; } 
            40%   {width: 85%; } 
            43%   {width: 100%; } 
            46%   {width: 92.5%; } 
            49%   {width: 89%; } 
            52%   {width: 87.5%; } 
            55%   {width: 87%; } 
            65%   {width: 92%; } 
            73%   {width: 100%; } 
            80%   {width: 96%; } 
            85%   {width: 95%; } 
            90%   {width: 94.5%; } 
            95%   {width: 96%; } 
            100%  {width: 100%;}
        }
        </style>`;
        let newCss: Element = utils.createNodeFromHtmlString(css_template);
        let prevSibling: Element = this.where.previousSibling as Element;
        if(prevSibling == null || prevSibling.nodeName.toLowerCase() != "style") {
            this.where.parentNode.insertBefore(newCss, this.where);
        } else {
            this.where.parentNode.replaceChild(newCss, prevSibling);
        }

        this.where.setAttribute("id", id);
        this.where.classList.add(this.displayClass);
        this.where.classList.remove("d-none"); 
        
        this.displayState = true;
        this.check_input(1000 * 5);
    }

    hide(): void {
        if(!this.displayState) return;
        let time: number = 1200;

        let id = utils.makeid(16);
        let css_template: string = 
        `<style>
        #${id} {
            animation-name:   anim-${id};
            animation-duration: ${time / 1000.0}s;
            background-size: cover;
            background-repeat: no-repeat;
        }
        @keyframes anim-${id} {
            0%    {width: 100%; opacity: 1; } 
            100%  {width: 0%; display: none; opacity: 0;}
        }
        </style>`;
        let newCss: Element = utils.createNodeFromHtmlString(css_template);
        let prevSibling: Element = this.where.previousSibling as Element;
        if(prevSibling == null || prevSibling.nodeName.toLowerCase() != "style") {
            this.where.parentNode.insertBefore(newCss, this.where);
        } else {
            this.where.parentNode.replaceChild(newCss, prevSibling);
        }

        this.where.setAttribute("id", id);
        window.setTimeout((() => {
            this.where.classList.remove(this.displayClass);
            this.where.classList.add("d-none"); 
            this.displayState = false;
        }).bind(this), time);
    }
    validate(): boolean {
        return SSRSubscription.url_pattern.test(this.where.value);
    }
    just_one_line(): void {
        this.where.value = this.where.value.replace(/\r|\n/, "");
    }
    get_url(): string {
        return this.where.value;
    }
    clean_input(): void {
        this.where.value = "";
    }
} //}

var address_bar: AddressBar;
var message_bar: MessageBar;

document.addEventListener("DOMContentLoaded", function() {
address_bar = new AddressBar(fucking.ElementsAccessor.address_bar);
message_bar = new MessageBar(fucking.ElementsAccessor.update_info);

message_bar.addEventListener("complete", function() {
    message_bar._hide();
});
message_bar.addEventListener("beginUpdate", function(earg: CustomEvent){
    message_bar.ShowWithDuration(`<div>${CONS.BeginUpdate}</div>`, 1000 * 1.5);
    return;
});

fucking.ElementsAccessor.address_bar.addEventListener("input", function() {address_bar.just_one_line();});
fucking.ElementsAccessor.address_bar.addEventListener("keydown", function(earg: KeyboardEvent) {
    if(earg.key.toLowerCase() != "enter") return;
    if(!address_bar.validate()) {
        message_bar.ShowWithDuration(
            `<div class="bg-danger rounded m-2 p-2">${CONS.URL_ERROR}</div>`, 3.9 * 1000);
        return
    }
    add_new_subscription(address_bar.get_url());
    address_bar.clean_input();
    address_bar.hide();
    message_bar.ShowWithDuration(
        `<div class="bg-success rounded m-2 p-2">${CONS.UPDATEIT}</div>`, 3.9 * 1000);
});

var in_updating = false;
fucking.ElementsAccessor.subs_update_button.addEventListener("click", () => {
    if(in_updating) return; // MAYBE SOME MESSAGE TO HINT USER
    message_bar.dispatchEvent(new CustomEvent("beginUpdate", {detail: {args: [3 * 1000]}}));
    let active_elem: HTMLElement = get_active_elem(fucking.ElementsAccessor.subscriptions_group);
    if(active_elem == null) {
        console.error("impossible");
        return;
    }
    let url = (active_elem.parentNode as any).ex_info;
    if((fucking.ElementsAccessor.subscriptions_group.lastChild as Element) == (active_elem.parentNode as Element)) {
        message_bar.ShowWithDuration(`<div class="bg-warning">${CONS.GIVEMEADDR}</div>`, 2 * 1000, true);
        return;
    }
    let sss: SSRSubscription;
    try {
        sss = new SSRSubscription(url);
    } catch {
        message_bar.ShowWithDuration(`<div class="bg-warning">${CONS.DONTTRYIT}</div>`, 2 * 1000, true);
        return;
    }
    in_updating = true;
    let fi: Promise<boolean> = sss.Subscribe();
    fi.then(() => {
        let new_ssr = sss.toRecord();
        let nn = fucking.servers_json_to_list([new_ssr as any]);
        // delete obsolete servers
        let dd = fucking.VarAccessor.server_index.filter(x => x["subs_link"] != sss.URL);
        let old_remarks = dd.map(x => x["remarks"]).filter(x => x != null);
        nn.map( x => {
            if(old_remarks.indexOf(x["remarks"]) != -1)
                return;
            dd.push(x);
        });
        fucking.VarAccessor.server_index = dd;
        document.dispatchEvent(new CustomEvent(UServerListChange, {detail: "update"}));
        in_updating = false;
        return;
    }, () => {
        message_bar.ShowWithDuration(`<div class="bg-warning">${CONS.SUBSFAIL}</div>`, 2 * 1000, true);
        in_updating = false;
        return;
    });
    return;
});

fucking.ElementsAccessor.subs_new_button.addEventListener("click", function() {
    address_bar.show();
});

fucking.ElementsAccessor.subs_delete_button.addEventListener("click", function() {
    let [elem, len, pos] = list_get_active_elem(fucking.ElementsAccessor.subscriptions_group);
    if(pos == len - 1) {
        message_bar.ShowWithDuration(`<div class="bg-warn rounded">${CONS.DONTTRYIT}</div>"`, 2.2 * 1000);
        return;
    }
    let url = (elem as any).ex_info;
    let old_ = fucking.classify_servers_by_subscription(fucking.VarAccessor.server_index);
    let new_ = [];
    for(let i in old_) {
        if(old_[i]["group"] == url)
            continue;
        new_.push(old_[i]);
    }
    fucking.VarAccessor.server_index = fucking.servers_json_to_list(new_);
    document.dispatchEvent(new CustomEvent(UServerListChange, {detail: "update"}));
});

}); // document.addEventListener()


let url_of_server_list = "/cgi-bin/luci/admin/services/ssrui/request-json?what=server_list";
// syncronize server with local data
function post_subscription_json_data(): Promise<any> //{
{
    if(fucking.VarAccessor.server_index.length == 0) {
        message_bar.ShowWithDuration(`<div class="bg-danger m-2 p-2">${CONS.EMPTYSERVERS}</div>`, 4 * 1000, true);
        return;
    }
    let json_data = fucking.classify_servers_by_group(fucking.VarAccessor.server_index);
    let send_this = JSON.stringify(json_data, null, 2);
    if(send_this == null || send_this.length == 0) {
        console.error("debug this");
        message_bar.ShowWithDuration(`<div class="bg-danger m-2 p-2">${CONS.UNKNOWNERROR}</div>`, 4 * 1000, true);
        return;
    }
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url_of_server_list)
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.onload = () => {
            if(xhr.status >= 200 && xhr.status < 300)
                resolve(xhr.response);
            else
                reject(xhr.status);
        }
        xhr.send(send_this);
    });
} //}

document.addEventListener("DOMContentLoaded", function() {
    fucking.ElementsAccessor.subs_syncro_button.addEventListener("click", () => {
        let timeout = 4 * 1000;
        message_bar.ShowWithDuration(`<div class="bg-warning m-2 p-2">${CONS.SYNCROWITH}</div>`, timeout);
        fucking.ElementsAccessor.subs_confirm_button.classList.remove("d-none");
        window.setTimeout(() => {
            fucking.ElementsAccessor.subs_confirm_button.classList.add("d-none");
        }, timeout);
    });
    fucking.ElementsAccessor.subs_confirm_button.addEventListener("click", () => {
        fucking.ElementsAccessor.subs_confirm_button.classList.add("d-none");
        let xhr_prom = post_subscription_json_data();
        if (xhr_prom == null) return;
        xhr_prom.then(() => {
            message_bar.ShowWithDuration(`<div class="bg-success m-2 p-2">${CONS.SYNCSUCCESS}</div>`, 3 * 1000, true);
            return;
        }, (statuscode) => {
            message_bar.ShowWithDuration(`<div class="bg-danger m-2 p-2">${CONS.SYNCFAIL} with ${statuscode}</div>`, 3 * 1000, true);
            return;
        });
    });
});


// syncronize ssr server infomation from server
function fetch_info_promise(): Promise<any> //{
{
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("GET", url_of_server_list, true);
        xhr.onload = () => {
            if(xhr.status >= 200 && xhr.status < 300)
                resolve(xhr.response);
            else
                reject(xhr.status);
        }
        xhr.send();
    });
} //}

let init_interval_of_retry = 2 * 1000;
function fetch_ssr_server_info(max_try: number, resolve: (resp: string) => void, 
    reject: (status: number) => void, init_timeout: number = init_interval_of_retry): void //{
{
    let xhr_promise;
    xhr_promise = fetch_info_promise();
    xhr_promise.then((resp: string) => {
        resolve(resp);
        return;
    }, (status: number) => {
        if(max_try == 1) {
            reject(status);
            return;
        }
        window.setTimeout(fetch_ssr_server_info, init_timeout, max_try - 1, resolve, reject, init_timeout * 2);
    });
} //}

document.addEventListener("DOMContentLoaded", function() {
    fucking.update_server_list([]);
    function error_handle(status: number) {
        message_bar.ShowWithDuration(`<div class="bg-danger m-2 p-2">${CONS.GET_SERVER_FAIL}</div>`, 3 * 1000, true);
    }
    fetch_ssr_server_info(5, (resp: string) => {
        let data = JSON.parse(resp);
        if(data == null) {
            error_handle(200);
            return;
        }
        fucking.update_server_list(data);
        message_bar.ShowWithDuration(`<div class="bg-success m-2 p-2">${CONS.GET_SERVER_SUCCESS}</div>`, 3 * 1000, true);
    }, error_handle);
    return;
});

let main_server_remarks:       HTMLInputElement;
let main_server_server:        HTMLInputElement;
let main_server_server_port:   HTMLInputElement;
let main_server_local_address: HTMLInputElement;
let main_server_local_port:    HTMLInputElement;
let main_server_password:      HTMLInputElement;
let main_server_method:        HTMLInputElement;
let main_server_protocol:      HTMLInputElement;
let main_server_protoparam:    HTMLInputElement;
let main_server_obfs:          HTMLInputElement;
let main_server_obfsparam:     HTMLInputElement;
// validate input
let x_button: input.ButtonValidity;
document.addEventListener("DOMContentLoaded", function() {
    main_server_remarks       = document.getElementById("main-server-remarks") as HTMLInputElement;
    main_server_server        = document.getElementById("main-server-server") as HTMLInputElement;
    main_server_server_port   = document.getElementById("main-server-server-port") as HTMLInputElement;
    main_server_local_address = document.getElementById("main-server-local-address") as HTMLInputElement;
    main_server_local_port    = document.getElementById("main-server-local-port") as HTMLInputElement;
    main_server_password      = document.getElementById("main-server-password") as HTMLInputElement;
    main_server_method        = document.getElementById("main-server-method") as HTMLInputElement;
    main_server_protocol      = document.getElementById("main-server-protocol") as HTMLInputElement;
    main_server_protoparam    = document.getElementById("main-server-protoparam") as HTMLInputElement;
    main_server_obfs          = document.getElementById("main-server-obfs") as HTMLInputElement;
    main_server_obfsparam     = document.getElementById("main-server-obfsparam") as HTMLInputElement;

    x_button = new input.ButtonValidity(fucking.ElementsAccessor.config_submit_button);
    let default_handle = (input: HTMLInputElement) => {
        return (bl: boolean, ii: HTMLInputElement) => {
            if(bl) {
                input.classList.remove("bg-danger");
            } else {
                if(input.value == "") input.classList.remove("bg-danger");
                else input.classList.add("bg-danger");
            }
        };
    };
    let ipv4_pattern   = /^(\d{1,3}\.){3}\d{1,3}$/;
    let port_pattern   = /^\d{1,5}$/;
    let gport_pattern  = /^\d{3,5}$/;
    let domain_pattern = /^([a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$/;
    input.check_when_change(main_server_server,        (val: string) => domain_pattern.test(val) || ipv4_pattern.test(val), 
        x_button, default_handle(main_server_server)); //
    input.check_when_change(main_server_remarks,       (val: string) => val != "",               x_button, default_handle(main_server_remarks));
    input.check_when_change(main_server_server_port,   (val: string) => port_pattern.test(val),  x_button, default_handle(main_server_server_port)); //
    input.check_when_change(main_server_local_address, (val: string) => ipv4_pattern.test(val),  x_button, default_handle(main_server_local_address)); //
    input.check_when_change(main_server_local_port,    (val: string) => gport_pattern.test(val), x_button, default_handle(main_server_local_port)); //
    input.check_when_change(main_server_password,      (val: string) => val != "",               x_button, default_handle(main_server_password));
    input.check_when_change(main_server_method,        (val: string) => val != "",               x_button, default_handle(main_server_method));
    input.check_when_change(main_server_protocol,      (val: string) => val != "",               x_button, default_handle(main_server_protocol));
//    input.check_when_change(main_server_protoparam,    (val: string) => val != "", x_button, default_handle(main_server_protoparam));
    input.check_when_change(main_server_obfs,          (val: string) => val != "",               x_button, default_handle(main_server_obfs));
//    input.check_when_change(main_server_obfsparam,     (val: string) => val != "", x_button, default_handle(main_server_obfsparam));
});

// context menu for gfw list //{
function show_menu(x: number, y: number) {
    fucking.ElementsAccessor.gfw_menu.style.left = x.toString() + "px";
    fucking.ElementsAccessor.gfw_menu.style.top  = y.toString() + "px";
    fucking.ElementsAccessor.gfw_menu.style.display = "block";
    utils.assert(selected_index != -1);
    if(selected_index <= 1) {
        fucking.ElementsAccessor.gfw_delete.disabled = true;
        fucking.ElementsAccessor.gfw_rename.disabled = true;
    } else {
        fucking.ElementsAccessor.gfw_delete.disabled = false;
        fucking.ElementsAccessor.gfw_rename.disabled = false;
    }
}
function hide_menu() {
    fucking.ElementsAccessor.gfw_menu.style.display = "none";
}
//}

let selected_elem: HTMLElement = null;
let selected_index: number     = -1;
let css_injector:  cssinjector.CSSInjector;
let gfw_list_list: controller.Menu;
let gfw_text_view: controller.MutexView;
// call only once
function __init_list_a() //{
{
    css_injector  = new cssinjector.CSSInjector("_inject_css_");
    gfw_list_list = new controller.Menu(css_injector, "<a href='#how'>List of GFW List</a>", "gfw-list", true);
    gfw_text_view = new controller.MutexView(css_injector, "temp", "gfw-text");

    gfw_list_list.addEventListener("delete", (earg: CustomEvent) => {
        gfw_text_view.delete_with_index(earg.detail.index);
    });

    gfw_list_list.addEventListener("insert", (earg: CustomEvent) => {
        gfw_text_view.new_with_template(earg.detail.index);
    });

    gfw_list_list.addEventListener("new-item", (earg: CustomEvent) => {
        let temp_name = utils.makeid(8);
        let url = earg.detail.target.firstChild.innerText;
        (earg.detail.target as any).extra_info = {url: url};
        earg.detail.target.firstChild.innerHTML = temp_name;
        let name = window.prompt(`${CONS.INPUT_NAME}`, temp_name);
        earg.detail.target.firstChild.innerText = name;
        earg.detail.target.firstChild.setAttribute("href", "#" + name);
    });

    gfw_list_list.addEventListener("change", (earg: CustomEvent) => {
        gfw_text_view.activate(earg.detail.index);
    });

    gfw_list_list.append_sub_item("<a href='#user-defined'   >USER DEFINED</a>", {url: "/luci-static"});
    gfw_list_list.append_sub_item("<a href='#github-gfw-list'>GITHUB GFW  </a>", {url: "https://baidu.com"});

    document.addEventListener("click", () => {
        hide_menu();
        selected_elem  = null;
        selected_index = -1;
    });
    fucking.ElementsAccessor.gfw_list.addEventListener("contextmenu", (ev: MouseEvent) => {
        let target: Element;
        if((ev.target as Element).nodeName.toLowerCase() == "a") {
            target = (ev.target as Element).parentNode as Element;
        } else if ((ev.target as Element).nodeName.toLowerCase() == "li") {
            target = ev.target as Element;
        } else {
            return;
        }
        if(target.parentNode.parentNode.children[0] != target.parentNode) return;
        for(let i = 0; i<target.parentNode.children.length; i++) {
            if(target.parentNode.children[i] == target) {
                selected_index = i;
                break;
            }
        }
        selected_elem = target as HTMLElement;
        utils.assert(selected_index != -1);
        show_menu(ev.clientX - 10, ev.clientY - 10);
        ev.preventDefault();
    });
} //}
function __init_list_b() //{
{
    let the_rename_input: HTMLInputElement = utils.createNodeFromHtmlString(`<input type="text"/>`) as HTMLInputElement;
    let the_replaced_node: HTMLElement;
    the_rename_input.addEventListener("keydown", (ev: KeyboardEvent) => {
        if(ev.code.toLowerCase() != "enter") return;
        utils.assert(the_replaced_node != null);
        if(the_rename_input.value != "")
            the_replaced_node.innerText = the_rename_input.value;
        the_rename_input.parentNode.replaceChild(the_replaced_node, the_rename_input);
        the_replaced_node = null;
        ev.preventDefault();
        return;
    });
    fucking.ElementsAccessor.gfw_delete.addEventListener("click", () => {
        utils.assert(selected_index != -1);
        let url: string = (selected_elem as any).extra_info;
        let name: string = (selected_elem.firstChild as HTMLElement).innerText; // TODO post data
        let data: string = (gfw_text_view.get_child_with_index(selected_index).children[1] as HTMLTextAreaElement).value;
        gfw.del_by_hash(url).then(() => {
            message_bar.ShowWithDuration(`<div class="bg-success">delete '${url}' success<div>`, 3 * 1000);
        }, () => {
            message_bar.ShowWithDuration(`<div class="bg-danger"> delete '${url}' success<div>`, 3 * 1000);
            gfw_list_list.append_sub_item(`<a href="#${name}>name</a>`, url);
        });
        utils.assert(gfw_list_list.delete_by_index(selected_index));
    });
    fucking.ElementsAccessor.gfw_rename.addEventListener("click", () => {
        utils.assert(selected_elem  != null);
        utils.assert(selected_index != -1);
        the_replaced_node = selected_elem.firstChild as HTMLElement;
        the_rename_input.value = the_replaced_node.innerText;
        the_replaced_node.parentNode.replaceChild(the_rename_input, the_replaced_node);
        the_rename_input.select();
        return;
    });
    fucking.ElementsAccessor.gfw_post.  addEventListener("click", () => {
        let url: string = (selected_elem as any).extra_info;
        let name: string = (selected_elem.firstChild as HTMLElement).innerText;
        let ee: HTMLElement = gfw_text_view.get_child_with_index(selected_index) as HTMLElement;
        let data: string = (ee.children[1] as HTMLTextAreaElement).value;
        gfw.post_by_hash(url, name, data).then( () => {
            message_bar.ShowWithDuration(`<div class="bg-success">${CONS.POSTSUCCESS}</div>`, 3 * 1000);
        }, () => {
            message_bar.ShowWithDuration(`<div class="bg-danger">${CONS.POSTFAIL}</div>`, 3 * 1000);
        });
        return;
    });
    fucking.ElementsAccessor.gfw_update.addEventListener("click", () => {
        let url: string = (selected_elem as any).extra_info;
        let ee: HTMLElement = gfw_text_view.get_child_with_index(selected_index) as HTMLElement;
        utils.assert(url != null);
        gfw.get_cross_domain(url).then((res: string) => {
            (ee.children[1] as HTMLTextAreaElement).value = res;
        }, (status: number) => {
            message_bar.ShowWithDuration(`<div class="bg-danger">${CONS.UPDATEFAIL} |${status}|</div>`, 3 * 1000);
        });
        return;
    });
} //}
document.addEventListener("DOMContentLoaded", () => {
    __init_list_a();
    __init_list_b();
});

var conf_cache = new Map<string, HTMLInputElement | HTMLSelectElement>();
function ssrconfig_get(str) //{
{
    if(conf_cache[str] != null) return conf_cache[str].value;
    let elem = document.getElementById("main-server-" + str.replace(/[_]/g, "-")) as HTMLInputElement | HTMLSelectElement;
    if(elem == null) return null
    conf_cache[str] = elem;
    return elem.value;
} //}
// server test
var in_test = false;
let url_of_server_test = "/cgi-bin/luci/admin/services/ssrui/test-server";
function get_test_promise(post_content): Promise<any> //{
{
    return new Promise((resolve, reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("POST", url_of_server_test, true);
        xhr.onload = () => {
            if(xhr.status != 200) {
                reject(xhr.status);
            } else {
                resolve(xhr.response);
            }
        }
        xhr.send(post_content);
    });
} //}
document.addEventListener("DOMContentLoaded", () => {
    fucking.ElementsAccessor.test_button.addEventListener("click", () => {
        if(in_test) {
            message_bar.ShowWithDuration(`<div class="bg-warning m-2 p-2">${CONS.TEST_WAIT}</div>`, 2 * 1000, true);
            return;
        }
        in_test = true;
        let server = ssrconfig_get("server");
        let port   = ssrconfig_get("server_port");
        utils.assert(server != null && port != null);
        let json = JSON.stringify({server: server, port: port});
        let pp = get_test_promise(json);
        pp.then((data) => {
            message_bar.ShowWithDuration(`<div class="bg-success m-2 p-2">${CONS.TEST_SUCCESS}</div>`, 2 * 1000, true);
            fucking.ElementsAccessor.test_output.value = data;
            in_test = false;
        }, () => {
            message_bar.ShowWithDuration(`<div class="bg-warning m-2 p-2">${CONS.TEST_FAIL}</div>`, 2 * 1000, true);
            in_test = false;
        });
        return;
    });
});

